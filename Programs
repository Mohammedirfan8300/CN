Program-01

Develop a program to illustrate the working of LED with push button

 #define buttonPin 4                    // the number of the pushbutton pin

#define ledPin 13                     // the number of the LED pin

int buttonState = 0;              // variable for reading the pushbutton status

void setup() {

// initialize the LED pin as an output:

pinMode(ledPin,OUTPUT);

// initialize the pushbutton pin as an input:

pinMode(buttonPin, INPUT);

}

void loop() {

// read the state of the pushbutton value:

buttonState = digitalRead(buttonPin);

// check if the pushbutton is pressed. If it is, the buttonState is HIGH:

if (buttonState == HIGH) {

// turn LED on:

digitalWrite(ledPin, LOW);

}

else {

// turn LED off:

digitalWrite(ledPin,HIGH);

}

}

OUTPUT



 



















                                                    Program –02

Develop a program to illustrate the working of traffic lights for pedstrians.

 // Pin definitions

const int carRed = 25;

const int carYellow = 26;

const int carGreen = 27;

const int pedRed = 14;

const int pedGreen = 12;

void setup() {

// Set LED pins as output

pinMode(carRed, OUTPUT);

pinMode(carYellow, OUTPUT);

pinMode(carGreen, OUTPUT);

pinMode(pedRed, OUTPUT);

pinMode(pedGreen, OUTPUT);

// Initialize traffic light (green for cars, red for pedestrians)

digitalWrite(carGreen, HIGH);

digitalWrite(pedRed, HIGH);

}

void loop() {

// Step 1: Green light for cars, red for pedestrians

digitalWrite(carGreen, HIGH);

digitalWrite(carYellow, LOW);

digitalWrite(carRed, LOW);

digitalWrite(pedGreen, LOW);

digitalWrite(pedRed, HIGH);

delay(5000); // Cars move for 5 seconds

// Step 2: Yellow light for cars, red for pedestrians

digitalWrite(carGreen, LOW);

digitalWrite(carYellow, HIGH);

delay(2000); // Yellow light for 2 seconds

// Step 3: Red light for cars, green for pedestrians

digitalWrite(carYellow, LOW);

digitalWrite(carRed, HIGH);

digitalWrite(pedRed, LOW);

digitalWrite(pedGreen, HIGH);

delay(5000); // Pedestrians cross for 5 seconds

// Step 4: Flash yellow light for cars before green light

digitalWrite(pedGreen, LOW);

digitalWrite(pedRed, HIGH);

for (int i = 0; i < 3; i++) {

digitalWrite(carYellow, HIGH);

delay(500);

digitalWrite(carYellow, LOW);

delay(500);

}

}





 



 







 





 

                          





















  PROGRAM—03

Develop a program for fading the LED

 #define ledPin 5    // Pin for the LED (can be changed based on your board)

int brightness = 0;      // Initial brightness level

int fadeAmount = 5; // Amount by which the brightness will

//increase/decrease

void setup() {

// Set the LED pin as an output

pinMode(ledPin, OUTPUT);

}

void loop() {

// Set the brightness of the LED using PWM

analogWrite(ledPin, brightness);

// Change the brightness for the next loop

brightness = brightness + fadeAmount;

// Reverse the direction of the fading if brightness reaches max or min

if (brightness <= 0 || brightness >= 255) {

fadeAmount = -fadeAmount;

}

// Delay for a smoother fading effect

delay(30); // Adjust this for faster/slower fading

}

OUTPUT:

                     





































                          

                                 Program 4. 

Program to blink 6 LEDs in ODD and Even Fashion.

 // Pin definitions for the odd and even LEDs 

#define led1 12 // Odd 

#define led3 13 // Odd 

#define led5 14 // Odd 

#define led2 25 // Even 

#define led4 26 // Even 

#define led6 27 // Even 

void setup() { 

// Set all the LED pins as outputs 

pinMode(led1, OUTPUT); 

pinMode(led2, OUTPUT); 

pinMode(led3, OUTPUT); 

pinMode(led4, OUTPUT); 

pinMode(led5, OUTPUT); 

pinMode(led6, OUTPUT); 

} 

void loop() { 

// Turn on all odd-numbered LEDs (1, 3, 5) 

digitalWrite(led1, HIGH); 

digitalWrite(led3, HIGH); 

digitalWrite(led5, HIGH); 

// Turn off all even-numbered LEDs (2, 4, 6)

digitalWrite(led2, LOW); 

digitalWrite(led4, LOW); 

digitalWrite(led6, LOW); 

delay(1000); // Wait for 1 second 

// Turn off all odd-numbered LEDs (1, 3, 5) 

digitalWrite(led1, LOW); 

digitalWrite(led3, LOW); 

digitalWrite(led5, LOW); 

// Turn on all even-numbered LEDs (2, 4, 6) 

digitalWrite(led2, HIGH); 

digitalWrite(led4, HIGH); 

digitalWrite(led6, HIGH); 

delay(1000); // Wait for 1 second 

}



 OUTPUT:





                                       



















5. Program to rotate servo motor both in clockwise and 

anticlockwise direction.

 

#include <ESP32Servo.h>  // Include the ESP32 Servo library 

Servo myServo;   // Create a Servo object 

int pos = 0;      // Variable to store the servo position 

void setup() { 

myServo.attach(4); // Attach the servo to pin 4 

} 

void loop() { 

// Rotate the servo clockwise (from 0 to 180 degrees) 

for (pos = 0; pos <= 180; pos += 1) { 

myServo.write(pos); // Set the servo to the current position 

delay(15); // Wait for 15ms for the servo to reach the position 

} 

// Rotate the servo anticlockwise (from 180 back to 0 degrees) 

for (pos = 180; pos >= 0; pos -= 1) { 

myServo.write(pos); // Set the servo to the current position 

delay(15); // Wait for 15ms for the servo to reach the position 

} 

}









 











                                       









                                    PROGRAM-06

Develop a program to simulate the interfacing of LDR with Arduino and control the intensity of LED using LDR

 #define ldrPin 15   // Pin connected to the LDR

#define ledPin 4   // Pin connected to the LED

int ldrValue = 0;    // Variable to store LDR reading

int ledBrightness = 0; // Variable to store LED brightness

void setup() {

pinMode(ledPin, OUTPUT); // Set the LED pin as output

Serial.begin(9600); // Start serial communication for debugging

}

void loop() {

// Read the value from the LDR (0 to 1023)

ldrValue = analogRead(ldrPin);

// Map the LDR value to a range of 0 to 255 for PWM (LED brightness)

ledBrightness = map(ldrValue, 0, 1023, 0, 255);

// Set the brightness of the LED using PWM

analogWrite(ledPin, ledBrightness);

// Debugging information

Serial.print("LDR Value: ");

Serial.print(ldrValue);

Serial.print(" LED Brightness: ");

Serial.println(ledBrightness);

delay(100); // Short delay for stability

}





 

















                               PROGRAM-07

Develop program to simulate the working of potentiometer and LED by varying the intensity of LED using  potentiometer.

 #define potPin 15 // Pin connected to the PoT

#define ledPin 4 // Pin connected to the LED

int potValue = 0; // Variable to store PoT reading

int ledBrightness = 0; // Variable to store LED brightness

void setup() {

pinMode(ledPin, OUTPUT); // Set the LED pin as output

Serial.begin(9600); // Start serial communication for debugging

}

void loop() {

// Read the value from the PoT (0 to 1023)

potValue = analogRead(potPin);

// Map the PoT value to a range of 0 to 255 for PWM (LED brightness)

ledBrightness = map(potValue, 0, 1023, 0, 255);

// Set the brightness of the LED using PWM

analogWrite(ledPin, ledBrightness);

// Debugging information

Serial.print("Pot Value: ");

Serial.print(potValue);

Serial.print(" LED Brightness: ");

Serial.println(ledBrightness);

delay(100);  // Short delay for stability

}



 







8. Program to simulate the working of OLED and print the room 

temperature value on OLED.

 #include <Wire.h>// 

#include <Adafruit_GFX.h> 

#include <Adafruit_SSD1306.h> 

#include "DHT.h" 

#define DHTPIN 4 // Pin connected to the DHT11 sensor 

#define DHTTYPE DHT11 // Type of DHT sensor 

#define SCREEN_WIDTH 128 // OLED display width, in pixels 

#define SCREEN_HEIGHT 64 // OLED display height, in pixels 

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins) 

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, 

-1); 

DHT dht(DHTPIN, DHTTYPE); 

float t = 0,h = 0; 

void setup() { 

Serial.begin(9600); 

// Initialize the OLED display 

if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 

Serial.println(F("SSD1306 allocation failed")); 

} 

dht.begin(); 

} 

void loop() { 

t = dht.readTemperature(); 

h = dht.readHumidity(); 

display.clearDisplay();

display.setTextSize(1); 

display.setTextColor(SSD1306_WHITE); 

display.setCursor(0,0); 

display.print("Temperature = "); 

display.println(t); 

display.print("Humidity = "); 

display.println(h); 

display.display(); 

delay(3000); 

}





 











9. Program for scrolling 5 LEDs back and forth.

 // Pin definitions for the 5 LEDs 

const int ledPins[] = {12, 13, 14, 25, 26, 27}; // Define LED pins 

const int numLeds = 6; // Total number of LEDs 

void setup() { 

// Set all the LED pins as outputs 

for (int i = 0; i < numLeds; i++) { 

pinMode(ledPins[i], OUTPUT); 

} 

} 

void loop() { 

// Scroll LEDs from left to right (forward) 

for (int i = 0; i < numLeds; i++) { 

digitalWrite(ledPins[i], HIGH); // Turn on the current LED 

delay(200); // Wait for 200ms 

digitalWrite(ledPins[i], LOW); // Turn off the current LED 

} 

// Scroll LEDs from right to left (backward) 

for (int i = numLeds - 1; i >= 0; i--) { 

digitalWrite(ledPins[i], HIGH); // Turn on the current LED 

delay(200); // Wait for 200ms 

digitalWrite(ledPins[i], LOW); // Turn off the current LED 

} 

}











































































10. Program to calculate the distance of an object using ultrasonic sensor.

 #define TRIG 11 

#define ECHO 12 

//define sound speed in cm/uS 

#define SOUND_SPEED 0.0343 

#define CM_TO_INCH 0.393701 

long duration; 

float distanceCm; 

float distanceInch; 

void setup() { 

Serial.begin(9600); // Starts the serial communication 

pinMode(TRIG, OUTPUT); // Sets the trigPin as an Output 

pinMode(ECHO, INPUT); // Sets the echoPin as an Input 

} 

void loop() { 

// Clears the trigPin 

digitalWrite(TRIG, LOW); 

delayMicroseconds(2); 

// Sets the trigPin on HIGH state for 10 micro seconds 

digitalWrite(TRIG, HIGH); 

delayMicroseconds(10)

digitalWrite(TRIG, LOW); 

// Reads the echoPin, returns the sound wave travel time in microseconds 

duration = pulseIn(ECHO, HIGH); 

// Calculate the distance 

distanceCm = duration * SOUND_SPEED/2; 

// Convert to inches 

distanceInch = distanceCm * CM_TO_INCH; 

// Prints the distance in the Serial Monitor 

Serial.print("Distance (cm): "); 

Serial.println(distanceCm); 

Serial.print("Distance (inch): "); 

Serial.println(distanceInch); 

delay(1000); 

}





















































11. Program to detect the collision using infrared sensor.

 #define IR 15 

void setup() { 

// put your setup code here, to run once: 

pinMode(IR,INPUT); 

Serial.begin(9600); 

} 

void loop() { 

// put your main code here, to run repeatedly: 

int ir = digitalRead(IR); 

// Serial.print(ir); 

// delay(500); 

if(ir == 1) 

Serial.println("Object Not Detected"); 

else 

Serial.println("Object Detected"); 

delay(1000); 

}

 





























12. Program to interface temperature sensor to read the room temperature, humidity and heat index and print the readings on the serial monitor.

 #include "DHT.h" 

#define DHT11PIN 15 

DHT dht(DHT11PIN, DHT11); 

void setup() 

{ 

Serial.begin(9600); /* Start the DHT11 Sensor */ 

dht.begin(); 

} 

void loop() 

{ 

float humi = dht.readHumidity(); 

float temp = dht.readTemperature(); 

Serial.print("Temperature: "); 

Serial.print(temp); 

Serial.println(" C "); 

Serial.print("Humidity: "); 

Serial.println(humi); 

delay(1000); 

}





















































point to point duplex
set ns [new Simulator] / Letter S is capital */

set nf [open lab1.nam w] / open a nam trace file in write mode/

Sns namtrace-all Suf /nf-nam file */

set tf [open lab1.tr w] / tf-trace file "/

Sns trace-all Stf

proc finish {} { provide space b/w proc and finish and all are in small case */

global ns nf tf

Sus flush-trace clears trace file contents */

close Snf

close Stf

exec nam labi. nam &

exit 0

}

set no [Sns node] / creates 4 nodes */

set n1 [Sns node]

set n2 [Sns node]

set 13 [Sns node]
Sns duplex-link $n0 $n2 200Mb 10ms DropTail/*Letter M is capital Mb*/ Sus duplex-link $n1 $n2 100Mb 5ms DropTail /*D and T are capital*/ Sns duplex-link $n2 $n3 1Mb 1000ms DropTail

Sns queue-limit $no Sn2 10 Sns queue-limit Sn1 Sn2 10

set udp0 [new Agent/UDP] / Letters A,U.D and P are capital */ Sns attach-agent $no $udpo

set cbro [new Application/Traffic/CBR] / A.T.C.B and R are capital*/ Scbro set packetSize_500/*S is capital, space after underscore*/ $cbro set interval 0.005 Scbro attach-agent Sudpo

set udp1 [new Agent/UDP] Sns attach-agent $n1 $udp1

set cbr1 [new Application/Traffic/CBR] Scbrl attach-agent Sudp1
set udp2 [new Agent/UDP] Sns attrach-agent $n2 Sudp2

set cbr2 [new Application/Traffic/CBR] $cbr2 attach-agent Sudp2

set nullo [new Agent/Null] /* A and N are capital */ Sns attach-agent $13 $nullo.

$ns connect $udp0 $nullo Sns connect $udp1 $nullo

$ns at 0.1 "$cbro start" $ns at 0.2 "$cbr1 start" Sns at 1.0 "finish"

Sns run
AWK file (Open a new editor using "vi command" and write awk file and save with ".awk" extension)

"immediately after BEGIN should open braces **

BEGIN (

c=0;

If ($1=="d")

{

c++:

printf("%s\t%s\n".$5.511):

} /*immediately after END should open braces {"

END{

printf("The number of packets dropped =%d\n".c);






ethernet lan 
set ns [new Simulator]

set tf [open lab3.tr w]

$ns trace-all Stf

set of [open lab3.nam w]

$ns namtrace-all Suf

set no [Sus node]

$no color "magenta"

$no label "src"

set nl [Sns node]

set 12 [$ns node]

$n2 color "magenta"

$n2 label "sre2"

set n3 [Sus node]

$n3 color "blue"

$n3 label "dest2"

set n4 [Sus node]

set n5 [5ns node]

$n5 color "blue"

Sn5 1

abel "dest1"
$ns make-lan "SnO $nl Sn2 $n3 $n4" 100Mb 100ms LL Queue DropTail Mac/802 3 should come in single line

$ns duplex-link Sn4 $n5 1Mb Ims Drop Tail

set tep0 [new Agent/TCP]

$ns attach-agent $n0 $tep0

set ftp0 [new Application/FTP]

$ftpo attach-agent Step0

$ftp0 set packetSize_500

$ftp0 set interval 0.0001

set sink5 [new Agent/TCPSink]

Sus attach-agent $n5 $sink5

$ns connect Step0 $sink5

set tep2 [new Agent/TCP]

Sns attach-agent Sn2 Step2

set ftp2 [new Application/FTP]

$ftp2 attach-agent Step2

$ftp2 set packetSize 600

$ftp2 set interval 0.001

set sink3 [new Agent/TCPSink]

$ns attach-agent $n3 $sink3.

$ns connect Step2 $sink3
set filel [open filel.tr w]

Stepo attach $filel

set file2 [open file2.tr w]

Step2 attach $file2

Stepo trace ewnd must put underscore() after ewnd and no space between them

Step2 trace ewnd

proc finish () (

Sns flush-trace

global ns nf tf close $tf close Snf exec nam lab3 nam &

exit 0

} Sus at 0.1 "$ftpo start"

5ns at 5 "$ftpo stop"

Sus at 7 "$ftp0 start"

Sus at 0.2 "Sftp2 start"

Sns at & "$ftp2 stop"

Sas at 14 "$ftpo stop"

Sns at 10 "$ftp2 start"

Sns at 15 "$ftp2 stop"

Sns at 16 "finish"

Sis run

AWK file (Open a new editor using "vi command" and write awk file and save with ".awk" extension)

cwnd:- means congestion window

BEGIN {

{ if($6=="cwnd") don't leave space after writing ewnd printf("%f\r%f\r\n",$1,57); /* you must put \n in printf/

END (











///Datagram socket///
import java.net.*;

public class UDPC {
    public static void main(String[] args) {
        DatagramSocket skt;
        try {
            // Create DatagramSocket
            skt = new DatagramSocket();

            // Message to send
            String msg = "udp";
            byte[] b = msg.getBytes();

            // Server details
            InetAddress host = InetAddress.getByName("127.0.0.1");
            int serverSocket = 6788;

            // Send the request packet
            DatagramPacket request = new DatagramPacket(b, b.length, host, serverSocket);
            skt.send(request);

            // Prepare buffer to receive the reply
            byte[] buffer = new byte[1000];
            DatagramPacket reply = new DatagramPacket(buffer, buffer.length);

            // Receive the reply
            skt.receive(reply);

            // Print the received message
            System.out.println("Client received: " + new String(reply.getData(), 0, reply.getLength()));

            // Close the socket
            skt.close();
        } catch (Exception ex) {
            // Silently handle exceptions
        }
    }
}


import java.net.*;

public class UDPS {

    public static void main(String[] args) {
        DatagramSocket skt = null;

        try {
            // Create a DatagramSocket at port 6788
            skt = new DatagramSocket(6788);

            // Prepare a buffer to receive messages
            byte[] buffer = new byte[1000];

            // Server runs infinitely
            while (true) {
                // Receive the request
                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
                skt.receive(request);

                // Process the request
                String message = new String(request.getData(), 0, request.getLength());
                String[] messageParts = message.split(" ");
                String responseMessage = messageParts[0] + " Network Laboratory";

                // Prepare and send the response
                byte[] sendMsg = responseMessage.getBytes();
                DatagramPacket reply = new DatagramPacket(
                        sendMsg, 
                        sendMsg.length, 
                        request.getAddress(), 
                        request.getPort()
                );
                skt.send(reply);

                // Print the response
                System.out.println("Server sent: " + responseMessage);
            }

        } catch (Exception ex) {
            // Handle exceptions silently
        } finally {
            if (skt != null && !skt.isClosed()) {
                skt.close();
            }
        }
    }
}







///*Bellman Ford*///
import java.util.Scanner; 
public class BellmanFord 
{ 
private int D[]; private int num_ver; 
public static final int MAX_VALUE = 999; 
public BellmanFord(int num_ver) 
{ 
this.num_ver = num_ver; D = new int[num_ver + 1]; 
} 
public void BellmanFordEvaluation(int source, int A[][]) 
{ 
for (int node = 1; node <= num_ver; node++) 
{ 
D[node] = MAX_VALUE;  } 
D[source] = 0; 
for (int node = 1; node <= num_ver - 1; node++) 
{ 
for (int sn = 1; sn <= num_ver; sn++) 
{ 
for (int dn = 1; dn <= num_ver; dn++) 
{ 
if (A[sn][dn] != MAX_VALUE) 
{ 
if (D[dn] > D[sn]+ A[sn][dn]) 
D[dn] = D[sn] + A[sn][dn];          }  }  }  }
for (int sn = 1; sn <= num_ver; sn++) 
{ 
for (int dn = 1; dn <= num_ver; dn++) 
{ 
if (A[sn][dn] != MAX_VALUE) 
{ 
if (D[dn] > D[sn]+ A[sn][dn]) 
System.out.println("The Graph contains negative egde cycle"); 
}  }  } 
for (int vertex = 1; vertex <= num_ver; vertex++)
{ 
System.out.println("distance of source " + source + " to "+ vertex + " is " + D[vertex]);   }  }
public static void main(String[ ] args)  { 
int num_ver = 0; int source; 
Scanner scanner = new Scanner(System.in);
 System.out.println("Enter the number of vertices");
 num_ver = scanner.nextInt(); 
int A[][] = new int[num_ver + 1][num_ver + 1]; 
System.out.println("Enter the adjacency matrix"); 
for (int sn = 1; sn <= num_ver; sn++)  { 
for (int dn = 1; dn <= num_ver; dn++)
{
A[sn][dn] = scanner.nextInt(); if (sn == dn) 
{ 
A[sn][dn] = 0; continue; 
} 
if (A[sn][dn] == 0) 
{ 
A[sn][dn] = MAX_VALUE;  }  }  } 
System.out.println("Enter the source vertex"); source = scanner.nextInt(); 
BellmanFord b = new BellmanFord (num_ver); b.BellmanFordEvaluation(source, A); scanner.close();  }  }



///*Leaky Bucket*///
import java.io.*; import java.util.*; 
class Queue 
{ 
int q[],f=0,r=0,size; 
void insert(int n) 
{ 
Scanner in = new Scanner(System.in); 
q=new int[10]; 
for(int i=0;i<n;i++) 
{ 
System.out.print("\nEnter " + i + " element: "); 
int ele=in.nextInt(); 
if(r+1>10) 
{ 
System.out.println("\nQueue is full \nLost Packet: "+ele); 
break; 
}
else 
{  } } } 
r++; 
q[i]=ele; 

void delete() 
{ 
Scanner in = new Scanner(System.in); Thread t=new Thread(); 
if(r==0) 
System.out.print("\nQueue empty "); 
else 
{ 
for(int i=f;i<r;i++) 
{ 
try 
{ 
t.sleep(1000);   }
catch(Exception e)
{       } 
System.out.print("\nLeaked Packet: "+q[i]); f++; 
} 
} 
System.out.println(); 
}    } 
class Leaky extends Thread 
{ 
public static void main(String ar[]) throws Exception 
{  } 
Queue q=new Queue(); 
Scanner src=new Scanner(System.in); 
System.out.println("\nEnter the packets to be sent:");
q. insert(size); q.delete(); 
int size=src.nextInt(); 
}  }
